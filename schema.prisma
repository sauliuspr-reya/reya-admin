generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candle {
  id                   String   @id @default(uuid())
  startedAt            DateTime
  market_id            Decimal
  resolution           String   @db.VarChar(50)
  low                  Decimal
  high                 Decimal
  open                 Decimal
  close                Decimal
  baseTokenVolume      Decimal
  usdVolume            Decimal
  trades               Int
  startingOpenInterest Decimal
  market               Market   @relation(fields: [market_id], references: [id])

  @@index([market_id])
}

model SpotCandle {
  id                   String     @id @default(uuid())
  startedAt            DateTime
  market_id            Decimal
  resolution           String     @db.VarChar(50)
  low                  Decimal
  high                 Decimal
  open                 Decimal
  close                Decimal
  baseTokenVolume      Decimal
  usdVolume            Decimal
  trades               Int
  startingOpenInterest Decimal
  market               SpotMarket @relation(fields: [market_id], references: [id])

  @@index([market_id])
}

model StorkPriceCandle {
  startedAt   DateTime
  assetPairId String     @db.VarChar(50)
  market_id   Decimal    // Required market ID (no foreign key constraint)
  resolution  String   @db.VarChar(50)
  low         Decimal
  high        Decimal
  open        Decimal
  close       Decimal
  isComplete  Boolean    @default(true)
  // Use natural key as primary key
  @@id([startedAt, resolution, assetPairId])
  
  // Keep indexes for query performance
  @@index([assetPairId])
  @@index([resolution])
  @@index([startedAt])
  @@index([market_id])
}

model Market {
  id                       Decimal              @id @db.Decimal
  ticker                   String               @db.VarChar(50)
  markPrice                Float
  isActive                 Boolean
  maxLeverage              Int
  volume24H                Float
  priceChange24H           Float
  longOI                   Float                @default(0)
  shortOI                  Float                @default(0)
  availableLong            Float                @default(0)
  availableShort           Float                @default(0)
  marketPriceDeviation     Float                @default(0)
  riskBlockId              Int
  rootCollateralPoolId     Int
  description              String               @db.VarChar(250)
  name                     String               @db.VarChar(250)
  quoteTokenId             String               @db.VarChar(250)
  tickSizeDecimals         Int
  underlyingAssetId        String               @db.VarChar(250)
  priceChange24HPercentage Float
  openInterest             Float
  fundingRate              Float
  priority                 Int                  @default(0)
  quoteToken               Asset                @relation("QuoteToken", fields: [quoteTokenId], references: [address])
  underlyingAsset          Asset                @relation("UnderlyingAsset", fields: [underlyingAssetId], references: [address])
  market_storage           market_storage       @relation(name: "MarketToMarketStorage", fields: [id], references: [market_id], map: "market_market_id_fkey")
  market_configuration     market_configuration @relation(name: "MarketToMarketConfiguration", fields: [id], references: [market_id], map: "market_raw_market_configuration_fkey")
  market_trackers          market_trackers      @relation(name: "MarketToMarketTrackers", fields: [id], references: [market_data_id], map: "market_raw_market_trackers_fkey")
  order_history            order_history[]
  Candle                   Candle[]
  rebate_fee_history       rebate_fee_history[]
  orders                   orders[]

  @@index([ticker])
}

model Asset {
  address                      String         @id @db.VarChar(250)
  name                         String         @db.VarChar(50)
  short                        String         @db.VarChar(50)
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt
  QuoteTokenMarket             Market[]       @relation("QuoteToken")
  UnderlyingAssetMarket        Market[]       @relation("UnderlyingAsset")
  QuoteTokenSpotMarket         SpotMarket[]   @relation("QuoteTokenSpotMarket")
  UnderlyingSpotAssetMarket    SpotMarket[]   @relation("UnderlyingAssetSpotMarket")
  pool_created                 pool_created[]
  asset_price_contract_id      String?
  asset_price_usdc_contract_id String?        @db.VarChar(250)
  price                        asset_price?   @relation(fields: [asset_price_contract_id], references: [contract_id])
  price_usdc                   asset_price?   @relation(name: "AssetToPriceUsdc", fields: [asset_price_usdc_contract_id], references: [contract_id])
  decimals                     Int            @default(18)

  margin_accounts_balance_entries margin_accounts_balance_entries[]
  market_storage                  market_storage[]
  BridgeTransactionsMarginAccount BridgeTransactionsMarginAccount[]
  auto_exchange_in                auto_exchange[]                   @relation("AssetIn")
  auto_exchange_out               auto_exchange[]                   @relation("AssetOut")
  swap_from                       swaps[]                           @relation("SwapFromToken")
  swap_to                         swaps[]                           @relation("SwapToToken")

  @@index([short])
}

model account_collateral_balance_entries {
  id               String                          @id
  account_id       Decimal?                        @db.Decimal
  collateral       String?
  amount           Decimal?                        @db.Decimal
  transaction_hash String
  block_timestamp  Decimal?                        @db.Decimal
  block_number     Decimal                         @db.Decimal
  unique_id        BigInt?
  account          account_owner_updated_snapshot? @relation(fields: [account_id], references: [account_id])

  @@index([account_id, collateral, amount])
}

model account_owner_updated_snapshot {
  account_id                         Decimal                              @id @db.Decimal
  transaction_hash                   String
  new_owner                          String?
  block_timestamp                    Decimal?                             @db.Decimal
  block_number                       Decimal                              @db.Decimal
  unique_id                          BigInt?
  account_collateral_balance_entries account_collateral_balance_entries[]
  AccountProfile                     AccountProfile?
  order_history                      order_history[]
  orders                             orders[]                             @relation("OrderPositionToOwner")
  counterparty_orders                orders[]                             @relation("OrderCounterapryPositionToOwner")
  auto_exchange                      auto_exchange[]
  rebate_fee_history                 rebate_fee_history[]                 @relation("OwnerReferrer")
  rebate_fee_history_referee         rebate_fee_history[]                 @relation("OwnerReferee")
  account_collateral_net_balance     account_collateral_net_balance[]

  @@index([new_owner])
}

model account_owner_updated_history {
  id               String   @id
  account_id       Decimal  @db.Decimal
  transaction_hash String
  new_owner        String?
  block_timestamp  Decimal? @db.Decimal
  block_number     Decimal  @db.Decimal
  unique_id        BigInt?
}

enum AccountStatus {
  OPEN
  CLOSED
}

model AccountProfile {
  account_id           Decimal                        @unique @db.Decimal
  name                 String                         @default("My Account") @db.VarChar(250)
  status               AccountStatus                  @default(OPEN)
  updated_timestamp_ms Decimal                        @db.Decimal
  source               String?                        @default("reya") @db.VarChar(250)
  account              account_owner_updated_snapshot @relation(fields: [account_id], references: [account_id])
}

model account_tier {
  market_id       Decimal  @db.Decimal
  account_id      Decimal  @db.Decimal
  tier_id         Decimal? @db.Decimal
  block_timestamp Decimal? @db.Decimal
  block_number    Decimal  @db.Decimal
  unique_id       BigInt?

  @@id([market_id, account_id])
}

model collateral_configuration {
  collateral_pool_id     Decimal  @db.Decimal
  collateral_address     String
  price_haircut          Decimal? @db.Decimal
  auto_exchange_discount Decimal? @db.Decimal
  oracle_node_id         String?
  block_timestamp        Decimal? @db.Decimal
  block_number           Decimal  @db.Decimal
  unique_id              BigInt?

  @@id([collateral_pool_id, collateral_address])
}

model market_configuration {
  market_id                   Decimal  @id @db.Decimal
  risk_matrix_index           Decimal? @db.Decimal
  max_open_base               Decimal? @db.Decimal
  velocity_multiplier         Decimal? @db.Decimal
  minimum_order_base          Decimal? @db.Decimal
  base_spacing                Decimal? @db.Decimal
  price_spacing               Decimal? @db.Decimal
  oracle_node_id              String?
  mtm_window                  Decimal? @db.Decimal
  dutch_config_lambda         Decimal? @db.Decimal
  dutch_config_min_base       Decimal? @db.Decimal
  slippage_params_phi         Decimal? @db.Decimal
  slippage_params_beta        Decimal? @db.Decimal
  depth_factor                Decimal? @default(0) @db.Decimal
  max_exposure_factor         Decimal? @default(0) @db.Decimal
  max_p_slippage              Decimal? @default(0) @db.Decimal
  price_spread                Decimal? @default(0) @db.Decimal
  volatility_index_multiplier Decimal? @default(0) @db.Decimal
  block_timestamp             Decimal? @db.Decimal
  block_number                Decimal  @db.Decimal
  unique_id                   BigInt?

  position_raw position_raw[] @relation(name: "PositionRawToMarketConfiguration")
  positions    positions[]    @relation(name: "PositionStatusToMarketConfiguration")
  market       Market?        @relation(name: "MarketToMarketConfiguration")
}

model market_trackers {
  market_data_id                  Decimal  @id @db.Decimal
  passive_pool_id                 Decimal? @db.Decimal
  pool_account_id                 Decimal? @db.Decimal
  quote_token                     String?
  quote_token_decimals            Decimal? @db.Decimal
  last_funding_velocity           Decimal? @db.Decimal
  last_funding_timestamp          Decimal? @db.Decimal
  last_mtm_price                  Decimal? @db.Decimal
  last_mtm_timestamp              Decimal? @db.Decimal
  long_trackers_funding_value     Decimal? @db.Decimal
  last_funding_rate               Decimal? @db.Decimal
  long_trackers_base_multiplier   Decimal? @db.Decimal
  long_trackers_adl_unwind_price  Decimal? @db.Decimal
  short_trackers_funding_value    Decimal? @db.Decimal
  short_trackers_base_multiplier  Decimal? @db.Decimal
  short_trackers_adl_unwind_price Decimal? @db.Decimal
  open_interest                   Decimal? @db.Decimal
  block_timestamp                 Decimal? @db.Decimal
  block_number                    Decimal  @db.Decimal
  unique_id                       BigInt?

  position_raw position_raw[] @relation(name: "PositionRawToMarketTrackers")
  positions    positions[]    @relation(name: "PositionStatusToMarketTrackers")
  market       Market?        @relation(name: "MarketToMarketTrackers")
}

model market_trackers_history {
  id                              String   @id
  market_data_id                  Decimal  @db.Decimal
  passive_pool_id                 Decimal? @db.Decimal
  pool_account_id                 Decimal? @db.Decimal
  quote_token                     String?
  quote_token_decimals            Decimal? @db.Decimal
  last_funding_velocity           Decimal? @db.Decimal
  last_funding_timestamp          Decimal? @db.Decimal
  last_mtm_price                  Decimal? @db.Decimal
  last_mtm_timestamp              Decimal? @db.Decimal
  long_trackers_funding_value     Decimal? @db.Decimal
  last_funding_rate               Decimal? @db.Decimal
  long_trackers_base_multiplier   Decimal? @db.Decimal
  long_trackers_adl_unwind_price  Decimal? @db.Decimal
  short_trackers_funding_value    Decimal? @db.Decimal
  short_trackers_base_multiplier  Decimal? @db.Decimal
  short_trackers_adl_unwind_price Decimal? @db.Decimal
  open_interest                   Decimal? @db.Decimal
  block_timestamp                 Decimal? @db.Decimal
  block_number                    Decimal  @db.Decimal
  unique_id                       BigInt?

  @@index([market_data_id, block_timestamp])
}

model position_raw {
  market_id                               Decimal  @db.Decimal
  account_id                              Decimal  @db.Decimal
  base                                    Decimal? @db.Decimal
  realized_pnl                            Decimal? @db.Decimal
  realized_pnl_latest_snapshot            Decimal? @default(0) @db.Decimal
  average_entry_price_off_chain_tracker   Decimal? @default(0) @db.Decimal
  funding_value_off_chain_tracker         Decimal? @default(0) @db.Decimal
  last_price                              Decimal? @db.Decimal
  position_data_last_price_data_timestamp Decimal? @db.Decimal
  funding_value                           Decimal? @db.Decimal
  base_multiplier                         Decimal? @db.Decimal
  adl_unwind_price                        Decimal? @db.Decimal
  transaction_hash                        String
  block_timestamp                         Decimal? @db.Decimal
  block_number                            Decimal  @db.Decimal
  unique_id                               BigInt?

  market_storage       market_storage       @relation(name: "PositionRawToMarketStorage", fields: [market_id], references: [market_id], map: "position_raw_market_id_fkey")
  market_configuration market_configuration @relation(name: "PositionRawToMarketConfiguration", fields: [market_id], references: [market_id], map: "position_raw_market_configuration_fkey")
  market_trackers      market_trackers      @relation(name: "PositionRawToMarketTrackers", fields: [market_id], references: [market_data_id], map: "position_raw_market_trackers_fkey")

  @@id([market_id, account_id])
}

model positions {
  market_id                               Decimal  @db.Decimal
  account_id                              Decimal  @db.Decimal
  base                                    Decimal? @db.Decimal
  realized_pnl                            Decimal? @db.Decimal
  realized_pnl_latest_snapshot            Decimal? @default(0) @db.Decimal
  average_entry_price_off_chain_tracker   Decimal? @default(0) @db.Decimal
  funding_value_off_chain_tracker         Decimal? @default(0) @db.Decimal
  last_price                              Decimal? @db.Decimal
  position_data_last_price_data_timestamp Decimal? @db.Decimal
  funding_value                           Decimal? @db.Decimal
  base_multiplier                         Decimal? @db.Decimal
  adl_unwind_price                        Decimal? @db.Decimal
  transaction_hash                        String
  block_timestamp                         Decimal? @db.Decimal
  block_number                            Decimal  @db.Decimal
  unique_id                               BigInt?

  market_storage       market_storage       @relation(name: "PositionStatusToMarketStorage", fields: [market_id], references: [market_id], map: "positions_market_id_fkey")
  market_configuration market_configuration @relation(name: "PositionStatusToMarketConfiguration", fields: [market_id], references: [market_id], map: "positions_market_configuration_fkey")
  market_trackers      market_trackers      @relation(name: "PositionStatusToMarketTrackers", fields: [market_id], references: [market_data_id], map: "positions_market_trackers_fkey")

  @@id([market_id, account_id])
}

model position_raw_history {
  id                                      String   @id
  market_id                               Decimal  @db.Decimal
  account_id                              Decimal  @db.Decimal
  base                                    Decimal? @db.Decimal
  realized_pnl                            Decimal? @db.Decimal
  last_price                              Decimal? @db.Decimal
  position_data_last_price_data_timestamp Decimal? @db.Decimal
  funding_value                           Decimal? @db.Decimal
  base_multiplier                         Decimal? @db.Decimal
  adl_unwind_price                        Decimal? @db.Decimal
  transaction_hash                        String
  block_timestamp                         Decimal? @db.Decimal
  block_number                            Decimal  @db.Decimal
  unique_id                               BigInt?

  @@index([market_id, account_id, block_timestamp])
  @@index([transaction_hash, unique_id])
  @@index([unique_id])
}

model risk_matrix {
  collateral_pool_id Decimal  @db.Decimal
  risk_block_id      Decimal  @db.Decimal
  risk_matrix        String[]
  block_timestamp    Decimal? @db.Decimal
  block_number       Decimal  @db.Decimal
  unique_id          BigInt?

  @@id([collateral_pool_id, risk_block_id])
}

model risk_multipliers_configuration {
  collateral_pool_id   Decimal  @id @db.Decimal
  im_multiplier        Decimal? @db.Decimal
  mmr_multiplier       Decimal? @db.Decimal
  dutch_multiplier     Decimal? @db.Decimal
  adl_multiplier       Decimal? @db.Decimal
  im_buffer_multiplier Decimal? @db.Decimal
  block_timestamp      Decimal? @db.Decimal
  block_number         Decimal  @db.Decimal
  unique_id            BigInt?
}

model liquidation_configuration {
  collateral_pool_id        Decimal  @id @db.Decimal
  bid_keeper_fee            Decimal? @db.Decimal
  queue_duration_in_seconds Decimal? @db.Decimal
  max_orders_in_bid         Decimal? @db.Decimal
  max_bids_in_queue         Decimal? @db.Decimal
  bid_score_weight          Decimal? @db.Decimal
  backstop_keeper_fee       Decimal? @db.Decimal
  adl_execution_keeper_fee  Decimal? @db.Decimal
  d_dutch_min               Decimal? @db.Decimal
  d_max                     Decimal? @db.Decimal
  block_timestamp           Decimal? @db.Decimal
  block_number              Decimal  @db.Decimal
  unique_id                 BigInt?
}

model tier_fee {
  market_id       Decimal  @db.Decimal
  tier_id         Decimal  @db.Decimal
  fee_parameter   Decimal? @db.Decimal
  block_timestamp Decimal? @db.Decimal
  block_number    Decimal  @db.Decimal
  unique_id       BigInt?

  @@id([market_id, tier_id])
}

model rebalancing_discount {
  market_id       Decimal  @db.Decimal
  tier_id         Decimal  @db.Decimal
  discount        Decimal? @db.Decimal
  block_timestamp Decimal? @db.Decimal
  block_number    Decimal  @db.Decimal
  unique_id       BigInt?

  @@id([market_id, tier_id])
}

model market_storage {
  market_id          Decimal        @id @db.Decimal
  quote_collateral   String?
  instrument_address String?
  name               String?
  risk_block_id      Decimal?       @db.Decimal
  collateral_pool_id Decimal?       @db.Decimal
  block_timestamp    Decimal?       @db.Decimal
  block_number       Decimal        @db.Decimal
  unique_id          BigInt?
  asset              Asset?         @relation(fields: [quote_collateral], references: [address])
  position_raw       position_raw[] @relation(name: "PositionRawToMarketStorage")
  positions          positions[]    @relation(name: "PositionStatusToMarketStorage")
  market             Market?        @relation(name: "MarketToMarketStorage")
}

model lp_account_balance_entries {
  id                     String        @id
  pool_id                Decimal?      @db.Decimal
  account                String?
  amount                 Decimal?      @db.Decimal
  share                  Decimal?      @db.Decimal
  new_share_balance      Decimal?      @db.Decimal
  transaction_hash       String
  token                  String        @default("0xa9f32a851b1800742e47725da54a09a7ef2556a3") @db.VarChar(250)
  token_delta_in_quote   Decimal       @default(0) @db.Decimal
  unique_id              BigInt?
  block_timestamp        Decimal?      @db.Decimal
  block_number           Decimal       @db.Decimal
  auto_increment_counter Int           @default(autoincrement())
  created_at             DateTime      @default(now())
  pool                   pool_created? @relation(fields: [pool_id], references: [pool_id])
}

model lp_unified_account_balance_entries {
  id                           String        @id
  pool_id                      Decimal?      @db.Decimal
  from                         String?
  staked_token_amount          Decimal?      @db.Decimal
  token                        String
  token_amount                 Decimal       @db.Decimal
  token_amount_in_quote        Decimal       @db.Decimal
  action_metadata_action       Int
  action_metadata_on_behalf_of String
  transaction_hash             String
  unique_id                    BigInt?
  block_timestamp              Decimal?      @db.Decimal
  block_number                 Decimal       @db.Decimal
  auto_increment_counter       Int           @default(autoincrement())
  created_at                   DateTime      @default(now())
  pool                         pool_created? @relation(fields: [pool_id], references: [pool_id])
}

model margin_accounts_balance_entries {
  id               String   @id
  account_id       Decimal? @db.Decimal
  collateral       String?
  amount           Decimal? @db.Decimal
  type             String
  transaction_hash String
  unique_id        BigInt?
  block_timestamp  Decimal? @db.Decimal
  block_number     Decimal  @db.Decimal
  asset            Asset?   @relation(fields: [collateral], references: [address])
}

model order_history {
  id                  String                          @id
  market_id           Decimal?                        @db.Decimal
  account_id          Decimal?                        @db.Decimal
  order_base          Decimal?                        @db.Decimal
  fee                 Decimal?                        @db.Decimal
  price               Decimal?                        @db.Decimal
  type                String
  processed           Boolean
  transaction_hash    String
  r_pnl               Decimal?                        @default(0) @db.Decimal
  price_variation_pnl Decimal?                        @default(0) @db.Decimal
  funding_pnl         Decimal?                        @default(0) @db.Decimal
  average_entry_price Decimal?                        @default(0) @db.Decimal
  block_timestamp     Decimal?                        @db.Decimal
  block_number        Decimal                         @db.Decimal
  source              String?                         @default("rpc") @db.VarChar(250)
  unique_id           BigInt?
  market              Market?                         @relation(fields: [market_id], references: [id])
  owner               account_owner_updated_snapshot? @relation(fields: [account_id], references: [account_id])
  instantBoost        TradingInstantBoostV4?          @relation(fields: [transaction_hash], references: [transactionHash])
  created_at          DateTime                        @default(now())

  @@index([block_timestamp])
  @@index([account_id])
  @@index([type])
  @@index([market_id])
  @@index([transaction_hash, unique_id])
}

model order_off_chain_trackers {
  id                  String   @id
  r_pnl               Decimal? @default(0) @db.Decimal
  price_variation_pnl Decimal? @default(0) @db.Decimal
  funding_pnl         Decimal? @default(0) @db.Decimal
  average_entry_price Decimal? @default(0) @db.Decimal

  orders orders? @relation(fields: [id], references: [id])
}

model orders {
  id                                   String                          @id
  market_id                            Decimal?                        @db.Decimal
  account_id                           Decimal?                        @db.Decimal
  executed_base                        Decimal?                        @db.Decimal
  fee                                  Decimal?                        @db.Decimal
  price                                Decimal?                        @db.Decimal
  is_match_order                       Boolean?
  liquidation_type                     Decimal?                        @db.Decimal
  position_base                        Decimal?                        @db.Decimal
  position_realized_pnl                Decimal?                        @db.Decimal
  position_last_price                  Decimal?                        @db.Decimal
  position_last_price_timestamp        Decimal?                        @db.Decimal
  position_funding_value               Decimal?                        @db.Decimal
  position_base_multiplier             Decimal?                        @db.Decimal
  position_adl_unwind_price            Decimal?                        @db.Decimal
  counterparty_account_id              Decimal?                        @db.Decimal
  counterparty_base                    Decimal?                        @db.Decimal
  counterparty_realized_pnl            Decimal?                        @db.Decimal
  counterparty_last_price              Decimal?                        @db.Decimal
  counterparty_last_price_timestamp    Decimal?                        @db.Decimal
  counterparty_funding_value           Decimal?                        @db.Decimal
  counterparty_base_multiplier         Decimal?                        @db.Decimal
  counterparty_adl_unwind_price        Decimal?                        @db.Decimal
  transaction_hash                     String
  block_timestamp                      Decimal?                        @db.Decimal
  block_number                         Decimal                         @db.Decimal
  unique_id                            BigInt?
  market                               Market?                         @relation(fields: [market_id], references: [id])
  owner                                account_owner_updated_snapshot? @relation(name: "OrderPositionToOwner", fields: [account_id], references: [account_id])
  counterparty_owner                   account_owner_updated_snapshot? @relation(name: "OrderCounterapryPositionToOwner", fields: [counterparty_account_id], references: [account_id])
  order_off_chain_trackers             order_off_chain_trackers?
  created_at                           DateTime                        @default(now())
  TradingInstantBoostV4                TradingInstantBoostV4?          @relation(fields: [tradingInstantBoostV4TransactionHash], references: [transactionHash])
  tradingInstantBoostV4TransactionHash String?

  @@index([block_timestamp])
  @@index([account_id])
  @@index([is_match_order])
  @@index([market_id])
  @@index([transaction_hash, unique_id])
}

model liquidation_history_details {
  id                      String   @id
  market_id               Decimal? @db.Decimal
  liquidatable_account_id Decimal? @db.Decimal
  liquidator_account_id   Decimal? @db.Decimal
  liquidated_base         Decimal? @db.Decimal
  price                   Decimal? @db.Decimal
  type                    Decimal? @db.Decimal
  transaction_hash        String
  block_timestamp         Decimal? @db.Decimal
  block_number            Decimal  @db.Decimal
  unique_id               BigInt?
  created_at              DateTime @default(now())
}

model pool_created {
  pool_id                            Decimal                              @id @db.Decimal
  account_id                         Decimal?                             @db.Decimal
  quote_token                        String?
  transaction_hash                   String
  block_timestamp                    Decimal?                             @db.Decimal
  block_number                       Decimal                              @db.Decimal
  unique_id                          BigInt?
  asset                              Asset?                               @relation(fields: [quote_token], references: [address])
  lp_account_balance_entries         lp_account_balance_entries[]
  lp_unified_account_balance_entries lp_unified_account_balance_entries[]
}

model PoolDetails {
  pool_id      Decimal @id @db.Decimal
  apy          Decimal @db.Decimal
  apy30d       Decimal @default(0) @db.Decimal
  apy1d        Decimal @default(0) @db.Decimal
  apyChange24h Decimal @db.Decimal
}

model asset_price {
  contract_id  String   @id
  price        Decimal? @db.Decimal
  round_id     Decimal? @db.Decimal
  timestamp    Decimal  @db.Decimal
  block_number Decimal  @db.Decimal
  unique_id    BigInt?
  AssetUsdc    Asset[]  @relation("AssetToPriceUsdc")
  Asset        Asset[]
}

model stork_asset_price_history {
  id              String   @id
  asset_pair_id   String   @db.VarChar(250)
  price           Decimal? @db.Decimal
  timestamp       Decimal  @db.Decimal
  stork_timestamp Decimal? @db.Decimal
  block_number    Decimal  @db.Decimal
  unique_id       BigInt?

  @@index([asset_pair_id, timestamp, stork_timestamp])
}

model asset_price_history {
  id           String   @id
  contract_id  String   @db.VarChar(250)
  price        Decimal? @db.Decimal
  round_id     Decimal? @db.Decimal
  timestamp    Decimal  @db.Decimal
  block_number Decimal  @db.Decimal
  unique_id    BigInt?

  @@index([contract_id, timestamp])
}

model account_signature_nonce {
  account_owner   String   @id
  nonce           Decimal? @db.Decimal
  block_timestamp Decimal  @db.Decimal
  block_number    Decimal  @db.Decimal
  unique_id       BigInt?
}

model account_signature_nonce_pool {
  account_owner   String   @id
  nonce           Decimal? @db.Decimal
  block_timestamp Decimal  @db.Decimal
  block_number    Decimal  @db.Decimal
  unique_id       BigInt?
}

model socket_withdraw_fees {
  token_address     String  @db.VarChar(250)
  connector_address String  @db.VarChar(250)
  fees              Decimal @db.Decimal
  block_timestamp   Decimal @db.Decimal
  block_number      Decimal @db.Decimal
  unique_id         BigInt?

  @@id([token_address, connector_address])
}

model AccountBalanceSeries {
  id                   Int     @id @default(autoincrement())
  timestamp            BigInt
  account_id           BigInt
  address              String  @db.VarChar(250)
  real_balance         Decimal @db.Decimal
  margin_balance       Decimal @db.Decimal
  exchange_rate        Decimal @db.Decimal
  r_usd_real_balance   Decimal @db.Decimal
  r_usd_margin_balance Decimal @db.Decimal
  margin_balance_sum   Decimal @db.Decimal

  @@index([account_id, timestamp])
}

model LpPoolBalanceSeries {
  id          Int     @id @default(autoincrement())
  pool_id     Int
  timestamp   BigInt
  value       Decimal
  apy         Decimal @default(0)
  share_price Decimal @default(1)

  @@index([pool_id])
  @@index([timestamp])
}

model LpPoolBalanceSeriesV2 {
  id                Int     @id @default(autoincrement())
  pool_id           Int
  timestamp         BigInt
  value             Decimal
  apy               Decimal @default(0)
  share_price       Decimal @default(1)
  share_price_index Decimal @default(0)

  @@index([pool_id])
  @@index([timestamp])
}

model LpPoolAddressPerformanceSeries {
  id               Int     @id @default(autoincrement())
  pool_id          Int
  address          String  @db.VarChar(250)
  timestamp        BigInt
  capital_invested Decimal
  balance          Decimal

  @@index([pool_id, address, timestamp])
}

model AccountTotalBalanceSeries {
  id         Int     @id @default(autoincrement())
  account_id Int
  timestamp  BigInt
  value      Decimal

  @@index([account_id, timestamp])
}

model AccountCollateralBalanceSeries {
  id         BigInt  @id @default(autoincrement())
  account_id Int
  collateral String  @db.VarChar(250)
  timestamp  BigInt
  value      Decimal

  @@index([account_id, collateral, timestamp])
}

model PriceSeries {
  id            Int     @id @default(autoincrement())
  asset_address String  @db.VarChar(250)
  timestamp     BigInt
  value         Decimal

  @@index([asset_address, timestamp])
}

model OwnerAddressTotalBalanceSeries {
  id            Int     @id @default(autoincrement())
  owner_address String  @db.VarChar(250)
  timestamp     BigInt
  value         Decimal

  @@index([owner_address, timestamp])
}

model FundingRateSeries {
  id        Int     @id @default(autoincrement())
  market_id Decimal @db.Decimal
  timestamp BigInt
  value     Decimal

  @@index([market_id, timestamp])
}

model PositionSeries {
  id          Int     @id @default(autoincrement())
  timestamp   BigInt
  account_id  BigInt
  market_id   BigInt
  entry_price Decimal @db.Decimal
  base        Decimal @db.Decimal
  r_pnl       Decimal @db.Decimal
  u_pnl       Decimal @db.Decimal
  lmr         Decimal @db.Decimal
  imr         Decimal @db.Decimal

  @@index([account_id])
  @@index([account_id, market_id])
  @@index([market_id, timestamp])
}

model ToSSignatures {
  id             Int    @id @default(autoincrement())
  wallet_address String @db.VarChar(250)
  signature      String @db.VarChar(1000)
  timestamp      BigInt
  version        String @db.VarChar(250)
}

model AlphaSignatures {
  id             Int    @id @default(autoincrement())
  wallet_address String @db.VarChar(250)
  signed_link    String @db.VarChar(250)
  timestamp      BigInt
}

model ToSVersions {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  message   String @db.VarChar(100000)
  version   String @unique @db.VarChar(250)
}

model ToSExtendedVersions {
  id           Int    @id @default(autoincrement())
  timestamp    BigInt
  sign_message String @db.VarChar(100000)
  long_message String @db.VarChar(100000)
  version      String @unique @db.VarChar(250)
  product      String @default("reya.network") @db.VarChar(250)
}

enum RandomBoostStatus {
  UNCLAIMED
  CLAIMED
}

model RandomBoost {
  id             Int               @id @default(autoincrement())
  wallet_address String            @db.VarChar(250)
  timestamp_ms   BigInt
  random_boost   Decimal           @db.Decimal
  status         RandomBoostStatus
  bodyId         String            @db.VarChar(250)

  @@index([wallet_address, timestamp_ms])
}

model TradingLotteryBoost {
  id             Int     @id @default(autoincrement())
  wallet_address String  @db.VarChar(250)
  timestamp_ms   BigInt
  boost          Decimal @db.Decimal

  @@index([wallet_address, timestamp_ms])
}

model TradingLotteryXpSnapshot {
  walletAddress String   @id @db.VarChar(250)
  tradingXp     Decimal  @db.Decimal
  createdAt     DateTime @default(now())
}

enum TradingBoostType {
  RANDOM
  LOTTERY
}

model TradingBoost {
  id                 Int              @id @default(autoincrement())
  wallet_address     String           @db.VarChar(250)
  start_timestamp_ms BigInt
  end_timestamp_ms   BigInt
  boost              Decimal          @db.Decimal
  account_id         Decimal?         @db.Decimal
  market_id          Decimal?         @db.Decimal
  tx_hash            String?          @db.VarChar(250)
  boost_type         TradingBoostType

  @@index([wallet_address])
}

model TradingInstantBoostV4 {
  transactionHash String          @id
  accountId       Decimal         @db.Decimal
  marketId        Decimal         @db.Decimal
  instantBoost    Decimal         @db.Decimal
  xpRateConstant  Decimal         @default(10) @db.Decimal
  order_history   order_history[]
  orders          orders[]
}

model LiquidityTrancheBoostV4 {
  id              String  @id
  transactionHash String  @db.VarChar(250)
  walletAddress   String  @db.VarChar(250)
  poolId          Decimal @db.Decimal
  trancheBoost    Decimal @db.Decimal
}

model Referral {
  beneficiary  String @db.VarChar(250)
  referral     String @db.VarChar(250)
  timestamp_ms BigInt

  @@id([beneficiary, referral])
  @@index([beneficiary])
}

model ReferralCode {
  wallet_address String @db.VarChar(250)
  code           String @id @db.VarChar(250)
  timestamp_ms   BigInt

  @@index([wallet_address])
  @@index([code])
}

model RankClaim {
  wallet_address String @db.VarChar(250)
  rank           Int
  timestamp_ms   BigInt

  @@id([wallet_address, rank])
  @@index([wallet_address])
}

model RankClaimTrading {
  wallet_address String @db.VarChar(250)
  rank           Int
  timestamp_ms   BigInt

  @@id([wallet_address, rank])
  @@index([wallet_address])
}

model XpUserV3 {
  wallet_address      String  @db.VarChar(250)
  random_boost        Decimal @db.Decimal
  weighted_boost      Decimal @db.Decimal
  share_balance       Decimal @db.Decimal
  liquidity_xp        Decimal @db.Decimal
  global_share_price  Decimal @db.Decimal
  global_share_supply Decimal @db.Decimal
  global_timestamp_ms BigInt
  global_unique_id    BigInt

  @@id([wallet_address, global_timestamp_ms])
  @@index([wallet_address, global_timestamp_ms])
}

model LatestXpLeaderboardV3 {
  wallet_address          String  @id @db.VarChar(250)
  ranking                 Int
  deposited_amount        Decimal @db.Decimal
  rate_xp_per_ms          Decimal @db.Decimal
  referral_rate_xp_per_ms Decimal @db.Decimal
  trading_xp              Decimal @db.Decimal
  liquidity_xp            Decimal @db.Decimal
  referral_xp             Decimal @db.Decimal
  voltz_xp                Decimal @default(0) @db.Decimal
  total_xp                Decimal @db.Decimal
  weighted_boost          Decimal @default(0) @db.Decimal
  random_boost            Decimal @default(0) @db.Decimal
  timestamp_ms            BigInt

  @@index([wallet_address])
  @@index([ranking])
}

model LatestXpLeaderboardSnapshots {
  wallet_address          String  @id @db.VarChar(250)
  ranking                 Int
  timestamp_ms            BigInt
  deposited_amount        Decimal @db.Decimal
  rate_xp_per_ms          Decimal @db.Decimal
  referral_rate_xp_per_ms Decimal @db.Decimal
  trading_xp              Decimal @db.Decimal
  liquidity_xp            Decimal @db.Decimal
  referral_xp             Decimal @db.Decimal
  trading_referral_xp     Decimal @default(0) @db.Decimal
  liquidity_referral_xp   Decimal @default(0) @db.Decimal
  voltz_xp                Decimal @default(0) @db.Decimal
  total_xp                Decimal @db.Decimal
  weighted_boost          Decimal @default(0) @db.Decimal
  random_boost            Decimal @default(0) @db.Decimal

  @@index([wallet_address])
  @@index([timestamp_ms])
  @@index([wallet_address, timestamp_ms])
  @@index([ranking])
}

model LatestXpLeaderboardSnapshotsV5 {
  wallet_address          String  @id @db.VarChar(250)
  ranking                 Int
  timestamp_ms            BigInt
  deposited_amount        Decimal @db.Decimal
  rate_xp_per_ms          Decimal @db.Decimal
  referral_rate_xp_per_ms Decimal @db.Decimal
  trading_xp              Decimal @db.Decimal
  liquidity_xp            Decimal @db.Decimal
  referral_xp             Decimal @db.Decimal
  trading_referral_xp     Decimal @default(0) @db.Decimal
  liquidity_referral_xp   Decimal @default(0) @db.Decimal
  voltz_xp                Decimal @default(0) @db.Decimal
  total_xp                Decimal @db.Decimal
  weighted_boost          Decimal @default(0) @db.Decimal
  random_boost            Decimal @default(0) @db.Decimal

  @@index([wallet_address])
  @@index([timestamp_ms])
  @@index([wallet_address, timestamp_ms])
  @@index([ranking])
}

model EndOfSeasonData {
  wallet_address           String  @db.VarChar(250)
  season_number            Int
  timestamp_ms             BigInt
  overall_position         Int
  rank                     Int
  overall_trading_position Int     @default(0)
  trading_rank             Int     @default(0)
  total_xp                 Decimal @db.Decimal
  trading_xp               Decimal @default(0) @db.Decimal
  liquidity_xp             Decimal @default(0) @db.Decimal
  referral_xp              Decimal @default(0) @db.Decimal
  trading_referral_xp      Decimal @default(0) @db.Decimal
  liquidity_referral_xp    Decimal @default(0) @db.Decimal
  voltz_xp                 Decimal @default(0) @db.Decimal

  @@id([wallet_address, season_number])
  @@index([wallet_address])
  @@index([timestamp_ms])
  @@index([wallet_address, timestamp_ms])
  @@index([overall_position])
}

model XpV3LeaderboardSnapshot {
  wallet_address          String  @id @db.VarChar(250)
  ranking                 Int
  timestamp_ms            BigInt
  deposited_amount        Decimal @db.Decimal
  rate_xp_per_ms          Decimal @db.Decimal
  referral_rate_xp_per_ms Decimal @db.Decimal
  trading_xp              Decimal @db.Decimal
  liquidity_xp            Decimal @db.Decimal
  referral_xp             Decimal @db.Decimal
  voltz_xp                Decimal @default(0) @db.Decimal
  total_xp                Decimal @db.Decimal
  weighted_boost          Decimal @default(0) @db.Decimal
  random_boost            Decimal @default(0) @db.Decimal

  @@index([wallet_address])
  @@index([timestamp_ms])
  @@index([wallet_address, timestamp_ms])
  @@index([ranking])
}

model rank_updates {
  id           String   @id
  contract_id  String   @db.VarChar(250)
  account      String?  @db.VarChar(250)
  rank         Decimal?
  timestamp    BigInt
  block_number BigInt
  unique_id    BigInt?
}

model vote_metadata {
  id                           String   @id
  contract_id                  String   @db.VarChar(250)
  id_param                     String?
  slug                         String?  @db.VarChar(100)
  title                        String?  @db.VarChar(500)
  description                  String?  @db.VarChar(10000)
  quorum_votes                 Decimal?
  block_timestamp_voting_start Decimal?
  block_timestamp_voting_end   Decimal?
  ranks_address                String?  @db.VarChar(250)
  timestamp                    BigInt
  block_number                 BigInt
  unique_id                    BigInt?
}

model votes {
  id              String   @id
  contract_id     String   @db.VarChar(250)
  id_param        String?
  account         String?  @db.VarChar(250)
  number_of_votes Decimal?
  yes_vote        Boolean?
  timestamp       BigInt
  block_number    BigInt
  unique_id       BigInt?
}

model BridgeTransactionsPool {
  source_tx_hash       String   @db.VarChar(250)
  destination_tx_hash  String?  @db.VarChar(250)
  source_chain_id      Int
  destination_chain_id Int
  wallet_address       String   @db.VarChar(250)
  status               String   @db.VarChar(250)
  amount               Decimal  @db.Decimal
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt

  @@id([source_tx_hash, source_chain_id])
  @@index([wallet_address, status])
}

model BridgeTransactionsMarginAccount {
  source_tx_hash       String   @db.VarChar(250)
  destination_tx_hash  String?  @db.VarChar(250)
  source_chain_id      Int
  destination_chain_id Int
  account_id           Decimal  @db.Decimal
  status               String   @db.VarChar(250)
  amount               Decimal  @db.Decimal
  type                 String   @db.VarChar(250)
  asset_id             String   @db.VarChar(250)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  asset                Asset    @relation(fields: [asset_id], references: [address])

  @@id([source_tx_hash, source_chain_id])
  @@index([status, account_id])
}

model SocketDepositFees {
  moneyInOutChainId Decimal @db.Decimal
  tokenName         String  @db.VarChar(250)
  fees              Decimal @db.Decimal

  @@id([moneyInOutChainId, tokenName])
}

model XpNftAwards {
  generatedTimestamp   Decimal  @id @db.Decimal
  awardedWalletAddress String?  @db.VarChar(250)
  awardedTimestamp     Decimal? @db.Decimal
  txHash               String?  @db.VarChar(250)
  state                String?  @db.VarChar(250)
}

model TrmRiskResult {
  walletAddress  String   @id @db.VarChar(250)
  validUntil     DateTime
  result         Boolean
  resultExtended Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([validUntil])
}

model LiquidityXpV4 {
  walletAddress String  @db.VarChar(250)
  poolId        Decimal @db.Decimal

  totalShares Decimal @db.Decimal

  trancheTotalShares   Decimal @db.Decimal
  trancheWeightedBoost Decimal @db.Decimal
  randomBoost          Decimal @db.Decimal

  checkpointTimestampMs             Decimal  @db.Decimal
  loyaltyBoostcheckpointTimestampMs Decimal  @default(0) @db.Decimal
  lastWithdrawTimestampMs           Decimal? @db.Decimal
  checkpointUniqueId                Decimal  @db.Decimal
  lastSharePriceIndex               Decimal  @db.Decimal

  loyaltyBoostStashed Decimal @default(0) @db.Decimal
  loyaltyBoostCompute Decimal @default(0) @db.Decimal

  totalXp                 Decimal @db.Decimal
  totalXpWithLoyaltyBoost Decimal @default(0) @db.Decimal

  @@id([walletAddress, poolId])
  @@index([walletAddress, poolId])
}

model LiquidityXpV5 {
  walletAddress String  @db.VarChar(250)
  poolId        Decimal @db.Decimal

  totalShares Decimal @db.Decimal

  trancheTotalShares   Decimal @db.Decimal
  trancheWeightedBoost Decimal @db.Decimal
  randomBoost          Decimal @db.Decimal

  checkpointTimestampMs Decimal @db.Decimal
  checkpointUniqueId    Decimal @db.Decimal
  lastSharePriceIndex   Decimal @db.Decimal

  totalXp Decimal @db.Decimal

  @@id([walletAddress, poolId])
  @@index([walletAddress, poolId])
}

model TradingXpV4 {
  walletAddress String  @db.VarChar(250)
  marketId      Decimal @db.Decimal

  totalBase Decimal @db.Decimal

  checkpointTimestampMs Decimal @db.Decimal
  checkpointUniqueId    Decimal @db.Decimal

  totalXp Decimal @db.Decimal

  lotteryBonusXp Decimal @default(0) @db.Decimal

  @@id([walletAddress, marketId])
  @@index([walletAddress, marketId])
}

model TradingXpV5 {
  walletAddress String  @db.VarChar(250)
  marketId      Decimal @db.Decimal

  totalBase Decimal @db.Decimal

  checkpointTimestampMs Decimal @db.Decimal
  checkpointUniqueId    Decimal @db.Decimal

  totalXp Decimal @db.Decimal

  @@id([walletAddress, marketId])
  @@index([walletAddress, marketId])
}

model ConditionalOrders {
  id         String  @id @default(uuid())
  account_id Decimal @db.Decimal
  market_id  Decimal @db.Decimal

  order_type    String  @default("Stop Loss") @db.VarChar(20)
  is_long       Boolean
  trigger_price Float
  order_base    Decimal @default(0) @db.Decimal

  exchange_id             BigInt @default(0)
  inputs                  String @default("") @db.VarChar(1000)
  counterparty_account_id BigInt @default(2)
  reya_chain_id           BigInt @default(1729)
  deadline                BigInt @default(1000000000000000000)

  signer_address           String  @db.VarChar(250)
  nonce                    Decimal @db.Decimal
  signature                String  @db.VarChar(1000)
  status                   String  @db.VarChar(20)
  creation_timestamp_ms    BigInt
  last_update_timestamp_ms BigInt
  transaction_hash         String?

  @@index([account_id, market_id, status])
}

model AccountTierFeeMonitoring {
  accountId     Decimal  @id @db.Decimal
  lastResultRaw Json
  lastAlertedAt DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([accountId, lastAlertedAt])
}

model StorkPriceUpdates {
  id                 String @id @default(uuid())
  oraclePubKey       String @db.VarChar(250)
  assetPairId        String @db.VarChar(250)
  publishTimestampNs BigInt
  priceWad           BigInt
  r                  String @db.VarChar(250)
  s                  String @db.VarChar(250)
  v                  BigInt
  timestampMs        BigInt

  @@index([oraclePubKey, assetPairId, publishTimestampNs])
}

model WalletDiscordLink {
  walletAddress        String  @id @db.VarChar(250)
  discordId            String  @unique @db.VarChar(250)
  discordUsername      String  @db.VarChar(250)
  discordDiscriminator String  @db.VarChar(250)
  discordGlobalName    String? @db.VarChar(250)
  discordAvatar        String? @db.VarChar(250)
  discordLocale        String? @db.VarChar(250)
  discordEmail         String? @db.VarChar(250)

  rank        Int?
  tradingRank Int?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rankClaimedAt DateTime?
}

model Passkeys {
  credId          String   @id @db.VarChar(250)
  creditPublicKey String   @db.VarChar(250)
  internalUserId  String   @db.VarChar(250)
  webauthnUserId  String   @db.VarChar(250)
  counter         Int
  backupStatus    Boolean
  deviceType      String   @db.VarChar(32)
  transports      String   @db.VarChar(250)
  createdAt       DateTime @default(now())
}

model EmbeddedWallets {
  embeddedWalletAddress              String   @id @db.VarChar(250)
  mainWalletAddress                  String   @db.VarChar(250)
  accountId                          String   @db.VarChar(250)
  embeddedWalletPrivateKeyCypherText String   @db.VarChar(250)
  embeddedWalletPrivateKeyIv         String   @db.VarChar(250)
  createdAt                          DateTime @default(now())
}

model WalletMarketPreference {
  walletAddress String   @db.VarChar(250)
  marketId      Decimal  @db.Decimal
  createdAt     DateTime @default(now())

  @@id([walletAddress, marketId])
}

model auto_exchange {
  id                              String                          @id
  liquidated_account_id           Decimal?                        @db.Decimal
  liquidator_account_id           Decimal?                        @db.Decimal
  requested_quote_amount          Decimal?                        @db.Decimal
  collateral_out_address          String?
  collateral_in_address           String?
  collateral_amount_to_liquidator Decimal?                        @db.Decimal
  quote_amount_to_insurance_fund  Decimal?                        @db.Decimal
  quote_amount_to_account         Decimal?                        @db.Decimal
  block_timestamp                 Decimal?                        @db.Decimal
  block_number                    Decimal                         @db.Decimal
  transaction_hash                String
  unique_id                       BigInt?
  asset_out                       Asset?                          @relation("AssetIn", fields: [collateral_out_address], references: [address])
  asset_in                        Asset?                          @relation("AssetOut", fields: [collateral_in_address], references: [address])
  owner                           account_owner_updated_snapshot? @relation(fields: [liquidated_account_id], references: [account_id])

  @@index([liquidated_account_id])
  @@index([liquidated_account_id, collateral_out_address])
}

model auto_exchange_configrations {
  collateral_pool_id                      Decimal  @id @db.Decimal
  total_auto_exchange_threshold_in_usd    Decimal? @db.Decimal
  negative_collateral_balances_multiplier Decimal? @db.Decimal
  quote_buffer_percentage                 String?
  block_timestamp                         Decimal? @db.Decimal
  block_number                            Decimal  @db.Decimal
  unique_id                               BigInt?

  @@index([collateral_pool_id])
}

model rebate_fee_history {
  id                  String                          @id
  market_id           Decimal                         @db.Decimal
  referrer_account_id Decimal                         @db.Decimal
  referee_account_id  Decimal                         @db.Decimal
  rebate_fee          Decimal                         @db.Decimal
  transaction_hash    String
  block_timestamp     Decimal?                        @db.Decimal
  block_number        Decimal                         @db.Decimal
  unique_id           BigInt?
  market              Market?                         @relation(fields: [market_id], references: [id])
  owner               account_owner_updated_snapshot? @relation("OwnerReferrer", fields: [referrer_account_id], references: [account_id])
  ownerReferee        account_owner_updated_snapshot? @relation("OwnerReferee", fields: [referee_account_id], references: [account_id])
  created_at          DateTime                        @default(now())

  @@index([block_timestamp])
  @@index([referrer_account_id])
  @@index([referee_account_id])
  @@index([market_id])
}

model referral_mapping_event {
  referee_account_id  Decimal  @db.Decimal
  referrer_account_id Decimal  @db.Decimal
  transaction_hash    String
  block_timestamp     Decimal? @db.Decimal
  block_number        Decimal  @db.Decimal
  unique_id           BigInt?
  created_at          DateTime @default(now())

  @@id([referee_account_id, referrer_account_id])
  @@index([block_timestamp])
}

model referrer_account_tier_event {
  referrer_account_id Decimal  @id @db.Decimal
  tier_id             Decimal  @db.Decimal
  transaction_hash    String
  block_timestamp     Decimal? @db.Decimal
  block_number        Decimal  @db.Decimal
  unique_id           BigInt?
  created_at          DateTime @default(now())

  @@index([block_timestamp])
}

model referrer_tier_rebate_event {
  tier_id                   Decimal  @id @db.Decimal
  referrer_rebate_parameter Decimal  @db.Decimal
  transaction_hash          String
  block_timestamp           Decimal? @db.Decimal
  block_number              Decimal  @db.Decimal
  unique_id                 BigInt?
  created_at                DateTime @default(now())

  @@index([block_timestamp])
}

model AffiliateWallets {
  walletAddress String   @id @db.VarChar(250)
  details       String
  createdAt     DateTime @default(now())
}

model WalletEvents {
  id            String   @id @default(uuid())
  walletAddress String   @db.VarChar(250)
  eventType     String   @db.VarChar(250)
  eventDetails  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([walletAddress, eventType])
}

model DiscordRankUpdaterHelper {
  walletAddress String   @db.VarChar(250)
  type          String   @db.VarChar(250)
  discordId     String   @db.VarChar(250)
  oldRank       Int
  newRank       Int
  createdAt     DateTime @default(now())

  @@id([walletAddress, type])
}

model AccountLeveragePerMarket {
  accountId Decimal  @db.Decimal
  marketId  Decimal  @db.Decimal
  leverage  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([accountId, marketId])
}

model TransactionFlowStatus {
  id            String  @id @db.VarChar(250)
  target        String  @db.VarChar(250)
  calldata      String  @db.VarChar(10000)
  prependPrices Boolean
  source        String  @db.VarChar(250)
  timestampMS   BigInt
  metadata      String  @db.VarChar(100000)
  status        String  @db.VarChar(250)
  txHash        String? @db.VarChar(250)
}

model PriceFeedMonitoring {
  id                   Int     @id @default(autoincrement())
  asset_pair_id        String  @db.VarChar(250)
  stork_price          Decimal @db.Decimal
  binance_price        Decimal @db.Decimal
  okx_price            Decimal @db.Decimal
  bybit_price          Decimal @db.Decimal
  stork_timestamp_ms   BigInt
  binance_timestamp_ms BigInt
  okx_timestamp_ms     BigInt
  bybit_timestamp_ms   BigInt
  current_timestamp_ms BigInt

  @@index([asset_pair_id, stork_timestamp_ms])
}

model market_volatility_configuration {
  market_id              Decimal @id @db.Decimal
  vol_price_impact       Decimal @db.Decimal
  latest_spike_timestamp Decimal @db.Decimal
  after_spike_window     Decimal @db.Decimal
  before_spike_window    Decimal @db.Decimal
  block_timestamp        Decimal @db.Decimal
  block_number           Decimal @db.Decimal
  unique_id              BigInt?

  @@index([block_timestamp])
}

model market_volatility_configuration_history {
  id                     String  @id @db.VarChar(250)
  market_id              Decimal @db.Decimal
  vol_price_impact       Decimal @db.Decimal
  latest_spike_timestamp Decimal @db.Decimal
  after_spike_window     Decimal @db.Decimal
  before_spike_window    Decimal @db.Decimal
  block_timestamp        Decimal @db.Decimal
  block_number           Decimal @db.Decimal
  unique_id              BigInt?

  @@index([market_id, block_timestamp])
}

model order_with_vol_price_impact {
  id                String  @id @db.VarChar(250)
  market_id         Decimal @db.Decimal
  account_id        Decimal @db.Decimal
  order_base        Decimal @db.Decimal
  price_pre_impact  Decimal @db.Decimal
  price_post_impact Decimal @db.Decimal
  block_timestamp   Decimal @db.Decimal
  block_number      Decimal @db.Decimal
  unique_id         BigInt?

  @@index([market_id, account_id, block_timestamp])
}

model LotteryWinners {
  lottery_draw_number   Decimal @id @db.Decimal
  winner_address_1      String  @db.VarChar(250)
  winner_address_2      String  @db.VarChar(250)
  winner_address_3      String  @db.VarChar(250)
  executor_address      String  @db.VarChar(250)
  executor_timestamp_ms Decimal @db.Decimal
}

model RageTradeCompetitionSnapshot {
  account_id           Int
  epoch_id             Int
  wallet_address       String  @db.VarChar(250)
  balance              Decimal @db.Decimal
  tier                 String  @db.VarChar(250)
  avg_balance_per_tier Decimal @db.Decimal
  total_pnl_usd        Decimal @db.Decimal
  roi                  Decimal @db.Decimal
  rank_in_tier         BigInt

  @@id([account_id, epoch_id])
}

model auto_rebalance_transactions {
  id               String  @id @db.VarChar(250)
  pool_id          Decimal @db.Decimal
  token_in         String  @db.VarChar(250)
  token_out        String  @db.VarChar(250)
  amount_in        Decimal @db.Decimal
  amount_out       Decimal @db.Decimal
  receiver_address String  @db.VarChar(250)
  block_timestamp  Decimal @db.Decimal
  block_number     Decimal @db.Decimal
  unique_id        BigInt?

  @@index([token_in, token_out, block_timestamp])
}

model auto_rebalance_target_ratio_post_quote {
  pool_id                 Decimal @db.Decimal
  token                   String  @db.VarChar(250)
  target_ratio_post_quote Decimal @db.Decimal
  block_timestamp         Decimal @db.Decimal
  block_number            Decimal @db.Decimal
  unique_id               BigInt?

  @@id([pool_id, token])
}

model auto_rebalance_allocation_configuration {
  pool_id                  Decimal @id @db.Decimal
  quote_token_target_ratio Decimal @db.Decimal
  block_timestamp          Decimal @db.Decimal
  block_number             Decimal @db.Decimal
  unique_id                BigInt?
}

model CronHelper {
  subject      String @id @db.VarChar(250)
  latest_value BigInt
}

model SpotMarket {
  id                Decimal      @id @db.Decimal
  ticker            String       @db.VarChar(50)
  price             Float
  isActive          Boolean
  volume24H         Float
  liquidity         Float
  quoteTokenId      String       @db.VarChar(250)
  tickSizeDecimals  Int
  underlyingAssetId String       @db.VarChar(250)
  poolAddress       String       @default("") @db.VarChar(250)
  priority          Int          @default(0)
  decimals_from     Int          @default(10)
  decimals_to       Int          @default(10)
  yield             Float        @default(0)
  quoteToken        Asset        @relation("QuoteTokenSpotMarket", fields: [quoteTokenId], references: [address])
  underlyingAsset   Asset        @relation("UnderlyingAssetSpotMarket", fields: [underlyingAssetId], references: [address])
  SpotCandle        SpotCandle[]

  @@index([ticker, isActive])
}

model swaps {
  id                  String  @id @db.VarChar(250)
  account_id          Decimal @db.Decimal
  token_in            String  @db.VarChar(250)
  token_out           String  @db.VarChar(250)
  amount_in           Decimal @db.Decimal
  amount_out          Decimal @db.Decimal
  executed_amount_out Decimal @db.Decimal
  transaction_hash    String  @default("") @db.VarChar(250)
  block_timestamp     Decimal @db.Decimal
  block_number        Decimal @db.Decimal
  unique_id           BigInt?
  tokenFrom           Asset   @relation("SwapFromToken", fields: [token_in], references: [address])
  tokenTo             Asset   @relation("SwapToToken", fields: [token_out], references: [address])

  @@index([account_id, token_in, token_out, block_timestamp])
}

model trading_stats_account_market {
  account_id                      Int
  market_id                       Int
  total_notional                  Decimal
  total_number_of_trades          Int
  current_season_notional         Decimal
  current_season_number_of_trades Int
  current_week_notional           Decimal
  current_week_number_of_trades   Int
  last_traded_at                  DateTime

  @@id([account_id, market_id])
}

model trading_stats_account {
  account_id                      Int      @id
  total_notional                  Decimal
  total_number_of_trades          Int
  current_season_notional         Decimal
  current_season_number_of_trades Int
  current_week_notional           Decimal
  current_week_number_of_trades   Int
  last_traded_at                  DateTime
}

model trading_stats_wallet {
  wallet_address                  String   @id @db.Char(42)
  total_notional                  Decimal
  total_number_of_trades          Int
  current_season_notional         Decimal
  current_season_number_of_trades Int
  current_week_notional           Decimal
  current_week_number_of_trades   Int
  streak_first_trade              DateTime
  streak_last_trade               DateTime
}

model account_collateral_net_balance {
  id                   String                          @id
  account_id           Decimal?                        @db.Decimal
  collateral           String?
  amount               Decimal?                        @db.Decimal
  last_block_timestamp Decimal?                        @db.Decimal
  last_block_number    Decimal                         @db.Decimal
  unique_id            BigInt?
  account              account_owner_updated_snapshot? @relation(fields: [account_id], references: [account_id])

  @@index([account_id, collateral])
}

model account_balances {
  account_id Int
  collateral String  @db.Char(42)
  balance    Decimal @db.Decimal

  @@id([account_id, collateral])
}

model pool_price_history {
  market_id        Int
  oracle_price_e18 Decimal @db.Decimal
  pool_price_e18   Decimal @db.Decimal
  timestamp_ms     BigInt
  source           String

  @@id([market_id, timestamp_ms])
  @@index([market_id])
  @@index([timestamp_ms])
  @@index([source])
}

model pool_price_snapshot {
  market_id        Int
  oracle_price_e18 Decimal @db.Decimal
  pool_price_e18   Decimal @db.Decimal
  timestamp_ms     BigInt
  source           String

  @@id([market_id])
  @@index([market_id])
  @@index([timestamp_ms])
  @@index([source])
}

enum Resolution {
  M1  @map("1M")
  M5  @map("5M")
  M15 @map("15M")
  M30 @map("30M")
  H1  @map("1H")
  H4  @map("4H")
  D1  @map("1D")
}

model asset_price_interval {
  timestamp     Int
  resolution    Resolution
  asset_pair_id String     @db.VarChar(250)
  price         Decimal?   @db.Decimal

  @@id([timestamp, asset_pair_id])
  @@index([resolution, asset_pair_id])
}

model market_trackers_interval {
  timestamp                       Int
  resolution                      Resolution
  market_id                       Int
  passive_pool_id                 Int
  long_trackers_funding_value     Decimal?   @db.Decimal
  long_trackers_base_multiplier   Decimal?   @db.Decimal
  long_trackers_adl_unwind_price  Decimal?   @db.Decimal
  short_trackers_funding_value    Decimal?   @db.Decimal
  short_trackers_base_multiplier  Decimal?   @db.Decimal
  short_trackers_adl_unwind_price Decimal?   @db.Decimal

  @@id([timestamp, market_id, passive_pool_id])
  @@index([resolution, market_id])
}

model sbt_mints {
  contract_id      String  @db.VarChar(250)
  token_id         Decimal @db.Decimal
  wallet_address   String?  @db.VarChar(250)
  token_root_count Decimal? @db.Decimal
  block_timestamp  Decimal @db.Decimal
  block_number     Decimal @db.Decimal
  unique_id        BigInt?

  @@id([contract_id, token_id])
  @@index([wallet_address])
}
